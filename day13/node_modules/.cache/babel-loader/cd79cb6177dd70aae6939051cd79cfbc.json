{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  status: \"idle\",\n  AlbumData: [],\n  searchString: \"\",\n  playlist: [{\n    id: 1,\n    name: \"demo 1\",\n    user: \"username\",\n    cover: \"https://mir-s3-cdn-cf.behance.net/project_modules/disp/ceb0a114960774.56037a57f1752.jpg\",\n    songs: []\n  }],\n  isLoggedIn: false\n};\nexport const mainSlice = createSlice({\n  name: \"global\",\n  initialState,\n  reducers: {\n    removeAll: state => {\n      state.status = \"idle\";\n      state.AlbumData = [];\n    },\n    fakedataPopulate: (state, action) => {\n      state.AlbumData = action.payload;\n    },\n    addNewAlbum: (state, {\n      payload\n    }) => {\n      if (payload) state.AlbumData = [...state.AlbumData, payload];\n    },\n    deleteAlbum: (state, {\n      payload\n    }) => {\n      if (payload) state.AlbumData = state.AlbumData.filter(x => x.id !== payload);\n    },\n    updateSearch: (state, action) => {\n      // console.log(\"mama\", action?.payload);\n      state.searchString = action === null || action === void 0 ? void 0 : action.payload;\n    },\n    createPlaylist: (state, action) => {\n      let temp = [...state.playlist];\n      let isAlreadyCreated = temp === null || temp === void 0 ? void 0 : temp.findIndex(x => x.name === action.payload.name);\n\n      if (isAlreadyCreated === -1) {\n        state.playlist = [...state.playlist, action.payload];\n      } else {\n        console.log(\"Same name already exists.\");\n      }\n    },\n    songAddRemove: (state, action) => {\n      var _state$playlist;\n\n      let {\n        playlist_id,\n        song\n      } = action.payload;\n      let isPlaylistAvailable = (_state$playlist = state.playlist) === null || _state$playlist === void 0 ? void 0 : _state$playlist.findIndex(x => x.id === playlist_id);\n\n      if (isPlaylistAvailable !== -1) {\n        var _state$playlist$isPla, _state$playlist$isPla2;\n\n        let isSongAvailable = (_state$playlist$isPla = state.playlist[isPlaylistAvailable]) === null || _state$playlist$isPla === void 0 ? void 0 : (_state$playlist$isPla2 = _state$playlist$isPla.songs) === null || _state$playlist$isPla2 === void 0 ? void 0 : _state$playlist$isPla2.findIndex(x => x.id === (song === null || song === void 0 ? void 0 : song.id));\n\n        if (isSongAvailable === -1) {\n          let temp = state.playlist[isPlaylistAvailable];\n          temp.songs.push(song); // console.log(\"popo\", state.playlist);\n\n          state.playlist = state.playlist.splice(isPlaylistAvailable, 1, temp);\n        } else {\n          let temp = state.playlist[isPlaylistAvailable];\n          temp.songs = temp.songs.filter(x => x.id !== song.id);\n          state.playlist = state.playlist.splice(isPlaylistAvailable, 1, temp);\n        }\n      }\n    },\n    handleLoginFunction: (state, action) => {\n      const {\n        type,\n        data\n      } = action === null || action === void 0 ? void 0 : action.payload;\n\n      if (type === \"signup\") {\n        let checkUserAvailable = localStorage.getItem(data === null || data === void 0 ? void 0 : data.email);\n\n        if (checkUserAvailable) {\n          console.log(\"Same user already exists.\");\n        } else {\n          localStorage.setItem(data === null || data === void 0 ? void 0 : data.email, JSON.stringify(data));\n          state.isLoggedIn = true;\n        }\n      }\n\n      if (type === \"signin\") {\n        let checkUserAvailable = localStorage.getItem(data === null || data === void 0 ? void 0 : data.email);\n\n        if (checkUserAvailable) {\n          var _JSON$parse;\n\n          if (((_JSON$parse = JSON.parse(checkUserAvailable)) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.password) === (data === null || data === void 0 ? void 0 : data.password)) {\n            state.isLoggedIn = true;\n          } else {\n            console.log(\"Please check your password and try again\");\n          }\n        } else {\n          console.log(\"no user available with the same email id.\");\n        }\n      }\n    },\n    handleSignout: (state, action) => {\n      state.isLoggedIn = false;\n    }\n  }\n});\nexport const {\n  removeAll,\n  fakedataPopulate,\n  addNewAlbum,\n  deleteAlbum,\n  updateSearch,\n  createPlaylist,\n  songAddRemove,\n  handleLoginFunction,\n  handleSignout\n} = mainSlice.actions;\nexport default mainSlice.reducer;","map":{"version":3,"sources":["C:/soal/fdoc-fe-8-bharath9929/day13/src/Redux/GeneralSlice.js"],"names":["createAsyncThunk","createSlice","initialState","status","AlbumData","searchString","playlist","id","name","user","cover","songs","isLoggedIn","mainSlice","reducers","removeAll","state","fakedataPopulate","action","payload","addNewAlbum","deleteAlbum","filter","x","updateSearch","createPlaylist","temp","isAlreadyCreated","findIndex","console","log","songAddRemove","playlist_id","song","isPlaylistAvailable","isSongAvailable","push","splice","handleLoginFunction","type","data","checkUserAvailable","localStorage","getItem","email","setItem","JSON","stringify","parse","password","handleSignout","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  status: \"idle\",\r\n  AlbumData: [],\r\n  searchString: \"\",\r\n  playlist: [\r\n    {\r\n      id: 1,\r\n      name: \"demo 1\",\r\n      user: \"username\",\r\n      cover:\r\n        \"https://mir-s3-cdn-cf.behance.net/project_modules/disp/ceb0a114960774.56037a57f1752.jpg\",\r\n      songs: [],\r\n    },\r\n  ],\r\n  isLoggedIn: false,\r\n};\r\nexport const mainSlice = createSlice({\r\n  name: \"global\",\r\n  initialState,\r\n  reducers: {\r\n    removeAll: (state) => {\r\n      state.status = \"idle\";\r\n      state.AlbumData = [];\r\n    },\r\n    fakedataPopulate: (state, action) => {\r\n      state.AlbumData = action.payload;\r\n    },\r\n    addNewAlbum: (state, { payload }) => {\r\n      if (payload) state.AlbumData = [...state.AlbumData, payload];\r\n    },\r\n    deleteAlbum: (state, { payload }) => {\r\n      if (payload)\r\n        state.AlbumData = state.AlbumData.filter((x) => x.id !== payload);\r\n    },\r\n    updateSearch: (state, action) => {\r\n      // console.log(\"mama\", action?.payload);\r\n      state.searchString = action?.payload;\r\n    },\r\n    createPlaylist: (state, action) => {\r\n      let temp = [...state.playlist];\r\n      let isAlreadyCreated = temp?.findIndex(\r\n        (x) => x.name === action.payload.name\r\n      );\r\n      if (isAlreadyCreated === -1) {\r\n        state.playlist = [...state.playlist, action.payload];\r\n      } else {\r\n        console.log(\"Same name already exists.\");\r\n      }\r\n    },\r\n    songAddRemove: (state, action) => {\r\n      let { playlist_id, song } = action.payload;\r\n\r\n      let isPlaylistAvailable = state.playlist?.findIndex(\r\n        (x) => x.id === playlist_id\r\n      );\r\n\r\n      if (isPlaylistAvailable !== -1) {\r\n        let isSongAvailable = state.playlist[\r\n          isPlaylistAvailable\r\n        ]?.songs?.findIndex((x) => x.id === song?.id);\r\n        if (isSongAvailable === -1) {\r\n          let temp = state.playlist[isPlaylistAvailable];\r\n          temp.songs.push(song);\r\n          // console.log(\"popo\", state.playlist);\r\n          state.playlist = state.playlist.splice(isPlaylistAvailable, 1, temp);\r\n        } else {\r\n          let temp = state.playlist[isPlaylistAvailable];\r\n          temp.songs = temp.songs.filter((x) => x.id !== song.id);\r\n          state.playlist = state.playlist.splice(isPlaylistAvailable, 1, temp);\r\n        }\r\n      }\r\n    },\r\n    handleLoginFunction: (state, action) => {\r\n      const { type, data } = action?.payload;\r\n      if (type === \"signup\") {\r\n        let checkUserAvailable = localStorage.getItem(data?.email);\r\n        if (checkUserAvailable) {\r\n          console.log(\"Same user already exists.\");\r\n        } else {\r\n          localStorage.setItem(data?.email, JSON.stringify(data));\r\n          state.isLoggedIn = true;\r\n        }\r\n      }\r\n      if (type === \"signin\") {\r\n        let checkUserAvailable = localStorage.getItem(data?.email);\r\n        if (checkUserAvailable) {\r\n          if (JSON.parse(checkUserAvailable)?.password === data?.password) {\r\n            state.isLoggedIn = true;\r\n          } else {\r\n            console.log(\"Please check your password and try again\");\r\n          }\r\n        } else {\r\n          console.log(\"no user available with the same email id.\");\r\n        }\r\n      }\r\n    },\r\n    handleSignout: (state, action) => {\r\n      state.isLoggedIn = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  removeAll,\r\n  fakedataPopulate,\r\n  addNewAlbum,\r\n  deleteAlbum,\r\n  updateSearch,\r\n  createPlaylist,\r\n  songAddRemove,\r\n  handleLoginFunction,\r\n  handleSignout,\r\n} = mainSlice.actions;\r\n\r\nexport default mainSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}